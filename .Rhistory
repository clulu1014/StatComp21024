devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
warnings()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("roxygen2")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
install.packages("roxygen2")
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
install.packages("stats4")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
knitr::opts_chunk$set(echo = T)
library(parallel)
boot_lm <- function(i) {
dat <- mtcars[sample(nrow(mtcars), rep = T), ]
summary(lm(mpg ~ wt + disp, data = dat))$r.square
}
n <- 1e5
system.time(sapply(1:n, boot_lm))
cl <- makeCluster(getOption("cl.cores", 4))
system.time({
res <- parSapply(cl,1:n,boot_lm)
})
stopCluster(cl)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
set.seed(1111)
cauchy <- function(x,theta,eta) {
return(1/(theta*pi*(1+((x-eta)/theta)^2))) # cauchy distribution pdf
rep <- 10000
theta <- 1
eta<- 0
sigma<- 0.5
x <- numeric(rep)
x[1] <- 1
k <- 0
u <- runif(rep)
for (i in 2:rep) {
xt <- x[i-1]
y<- rnorm(1,xt,sigma) # normal distribution as proposal distribution
num <- cauchy(y,theta,eta)
den <- cauchy(xt,theta,eta)
if (u[i] <= num/den){
x[i] <- y
} else {
x[i] <- xt
k <- k+1     # reject y, repeat steps above
}
}
index <- 9500:10000
y1 <- x[index]
plot(index, y1, type="l", main="Part of a chain generated by M-H sampler of a Cauchy distribution", ylab="x")
M<- 5
burn <- 1001
y <- x[burn:rep]
QT <- qcauchy(0:9/10)
QC <- quantile(y, (0:9)/10)
QT[1]<-QC[1]<- -M
QT[10]<-QC[10]<- M
set.seed(1111)
cauchy <- function(x,theta,eta) {
return(1/(theta*pi*(1+((x-eta)/theta)^2))) # cauchy distribution pdf
}
rep <- 10000
theta <- 1
eta<- 0
sigma<- 0.5
x <- numeric(rep)
x[1] <- 1
k <- 0
u <- runif(rep)
for (i in 2:rep) {
xt <- x[i-1]
y<- rnorm(1,xt,sigma) # normal distribution as proposal distribution
num <- cauchy(y,theta,eta)
den <- cauchy(xt,theta,eta)
if (u[i] <= num/den){
x[i] <- y
} else {
x[i] <- xt
k <- k+1     # reject y, repeat steps above
}
}
index <- 9500:10000
y1 <- x[index]
plot(index, y1, type="l", main="Part of a chain generated by M-H sampler of a Cauchy distribution", ylab="x")
M<- 5
burn <- 1001
y <- x[burn:rep]
QT <- qcauchy(0:9/10)
QC <- quantile(y, (0:9)/10)
QT[1]<-QC[1]<- -M
QT[10]<-QC[10]<- M
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(StatComp21024)
K<- 3
N<- 10
A<- netA(K,N)
A
library(StatComp21024)
T<- 1000
K<- 5
N<- 100
beta<- c(0.2,-0.4)
A<- netA(K,N)
obR(A,beta,T)
library(StatComp21024)
T<- 100
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
obR(A,beta,T)
library(StatComp21024)
T<- 100
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- obR(A,beta,T)
hatbeta<- betahatR(res$Y,res$X)$betahat
hatbeta
library(StatComp21024)
T<- 1000
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- obR(A,beta,T)
hatbeta<- betahatR(res$Y,res$X)$betahat
hatbeta
library(StatComp21024)
T<- 1e5
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- obR(A,beta,T)
hatbeta<- betahatR(res$Y,res$X)$betahat
hatbeta
library(StatComp21024)
T<- c(10,100,100,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- obR(A,beta,T)
hatbeta<- betahatR(res$Y,res$X)$betahat
hatbeta
library(StatComp21024)
T<- c(10,100,100,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- obR(A,beta,T)
hatbeta<- betahatR(res$Y,res$X)$betahat
hatbeta
library(StatComp21024)
T<- 1000
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- obR(A,beta,T)
hatbeta<- betahatR(res$Y,res$X)$betahat
hatbeta
library(StatComp21024)
T<- C(10,100,1000,1e4)
library(StatComp21024)
T<- c(10,100,1000,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- list()
hatbeta<- matrix(0,2,length(T))
for (t in 1:length(T)){
res[[t]]<- obR(A,beta,T[t])
hatbeta[,t]<- betahatR(res$Y,res$X)$betahat
}
library(StatComp21024)
T<- c(10,100,1000,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- list()
hatbeta<- matrix(0,2,length(T))
for (t in 1:length(T)){
res[[t]]<- obR(A,beta,T[t])
hatbeta[,t]<- betahatR(res[[t]]$Y,res[[t]]$X)$betahat
}
hatbeta
library(StatComp21024)
T<- c(10,100,1000,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- list()
hatbeta<- matrix(0,2,length(T))
for (t in 1:length(T)){
res[[t]]<- obR(A,beta,T[t])
hatbeta[,t]<- betahatR(res[[t]]$Y,res[[t]]$X)$betahat
}
hatbeta
?rownames()
?row.names()
library(StatComp21024)
T<- c(10,100,1000,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- list()
hatbeta<- matrix(0,2,length(T))
for (t in 1:length(T)){
res[[t]]<- obR(A,beta,T[t])
hatbeta[,t]<- betahatR(res[[t]]$Y,res[[t]]$X)$betahat
}
rownames(hatbeta)<- c(beta1,beta2)
library(StatComp21024)
T<- c(10,100,1000,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- list()
hatbeta<- matrix(0,2,length(T))
for (t in 1:length(T)){
res[[t]]<- obR(A,beta,T[t])
hatbeta[,t]<- betahatR(res[[t]]$Y,res[[t]]$X)$betahat
}
rownames(hatbeta)<- c('beta1','beta2')
colnames(hatbeta)<- T
library(StatComp21024)
T<- c(10,100,1000,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- list()
hatbeta<- matrix(0,2,length(T))
for (t in 1:length(T)){
res[[t]]<- obR(A,beta,T[t])
hatbeta[,t]<- betahatR(res[[t]]$Y,res[[t]]$X)$betahat
}
rownames(hatbeta)<- c('beta1','beta2')
colnames(hatbeta)<- T
hatbeta
library(StatComp21024)
T<- c(10,50,100,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- list()
hatbeta<- matrix(0,2,length(T))
for (t in 1:length(T)){
res[[t]]<- obR(A,beta,T[t])
hatbeta[,t]<- betahatR(res[[t]]$Y,res[[t]]$X)$betahat
}
rownames(hatbeta)<- c('beta1','beta2')
colnames(hatbeta)<- T
hatbeta
set.seed(1234)
library(StatComp21024)
T<- c(10,50,100,1e4)
K<- 3
N<- 10
beta<- c(0.2,-0.4)
A<- netA(K,N)
res<- list()
hatbeta<- matrix(0,2,length(T))
for (t in 1:length(T)){
res[[t]]<- obR(A,beta,T[t])
hatbeta[,t]<- betahatR(res[[t]]$Y,res[[t]]$X)$betahat
}
rownames(hatbeta)<- c('beta1','beta2')
colnames(hatbeta)<- T
hatbeta
set.seed(1234)
library(StatComp21024)
rep<- 1000
T<- 100
K<- 3
N<- 10
beta<- c(0.2,-0.4)
mseCPR(rep,K,N,beta,T)
set.seed(1234)
library(StatComp21024)
rep<- 1000
T<- 100
K<- 3
N<- 10
beta<- c(0.2,-0.4)
mseCPR(rep,K,N,beta,T)
set.seed(1234)
library(StatComp21024)
rep<- 1000
T<- 100
K<- 3
N<- 10
beta<- c(0.2,-0.4)
RMSE(rep,K,N,beta,T)
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('roxygen2',dependencies = TRUE)
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
install.packages('C:/Users/lenovo/Desktop/R/StatComp/StatComp21024_1.0.tar.gz',repo=NULL)
